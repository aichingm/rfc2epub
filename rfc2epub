#!/usr/bin/env php
<?php

function usageExit($exitCode) {
    echo <<<EOU
rfc2epub - create an epub ebook from an ietf rfc.

Usage: rfc2epub [-flags [parameter]] <number of the rfc>

    Checkout the EXAMPLES (with: rfc2epub -e)

Flags

    -e             Show usage examples
    -h, --help     Print this message
    -o, --output   Set the output filename. The default is "RFC <number>.epub".

    --preset       Use preset combination known to work well on certain readers. This can
                    be combined with any other formatting flags to override these defaults.
                    Allowed values: paperwhite

    -f             Replace the vendors font with M+ M1 (a very narrow monospaced font
                    by the M+ FONTS PROJECT)
    -d             Do not package the book to epub but create the file
                    and directory structure with all its contents
    -t, --toc      Create a table of contents
    -c, --cover    Create a cover
    -F, --weight   Set the font weight. Implies -f.
                    Allowed values: thin, light, regular, medium
    -L, --spacing  Set the letter-spacing, in pixels.
    -S, --split    Set the text which splits the text and the page number in the
                    table of contents
    -s, --size     Set the output font size, in em (default 1)
    -b, --break    Preserve page breaks from the original text file


Special Thanks to M+ FONTS PROJECT for publishing their fonts under a
    Free License â™¥

EOU;
    exit($exitCode);
}

function examples() {
    echo <<<EOU
rfc2epub - create an epub ebook from an ietf rfc.

Examples:

    1. rfc2epub -o 2549.epub 2549
       Creates an ebook of the rfc 2549 and names it 2549.epub

    2. rfc2epub -f --weight light -L -1 -o 2549.epub 2549
       Use the M+ 1M font in "light" weight, with a letter spacing of -1px.

    3. rfc2epub --preset paperwhite 2549
       Creates an ebook of RFC 2549 using best settings for a Kindle Paperwhite and names it
        RFC 2549.epub


EOU;
    exit(0);
}

/* Defining */
{
    define("VERSION", -1);
    define("URL", "https://datatracker.ietf.org/doc/html/rfc");
    define("URL_EXT", ".html");
    define("USER_AGENT", "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.13) Gecko/20080311 Firefox/2.0.0.13");
    define("INTERNAL_FONT_MIME", ["ttf" => "font/ttf", "woff" => "font/eot", "svg" => "font/otf", "eot" => "font/woff"]);
}



/* Configuration */
{
    $OUTPUT_TYPE = "ZIP"; //DIR, ZIP
    $OUTPUT_NAME = null;
    $CREATE_TOC = false;
    $CREATE_COVER = false;
    $USE_INTERNAL_FONT = true;
    $INTERNAL_FONT = "mp-1m";
    $INTERNAL_FONT_WIDTH = "regular"; //thin, light, regular, medium
    $INTERNAL_FONT_FORMATS = ["ttf", "woff", "svg", "eot"];
    $LETTER_SPACING = 0.;
    $TOC_SPLITTER = "....";
    $FONT_SIZE = 1.;
    $INSERT_PAGE_BREAKS = false;
}


/* Commandline Parsing */
{
    $rest_index = null;
    $flags = getopt("hefdtcF:L:S:s:o:b",
      ["help", "toc", "cover", "weight:", "spacing:", "split:", "size:", "preset:", "output:",
       "break"
      ],
      $rest_index
    );
    $pos_args = array_slice($argv, $rest_index);

    // Parse any --preset flags *before* other flags, so that other flags override this.
    if (array_key_exists("preset", $flags)) {
      if ($flags["preset"] == "paperwhite") {
          $CREATE_TOC = true;
          $CREATE_COVER = true;
          $INSERT_PAGE_BREAKS = false;
          $USE_INTERNAL_FONT = true;
          $INTERNAL_FONT_WIDTH = "regular";
          $LETTER_SPACING = -1.5;
          $FONT_SIZE = 0.8;
      } else {
          usageExit(0);
      }
    }

    // Parse all the other flags
    foreach ($flags as $flag => $value) {
        switch ($flag) {
            case "h":
            case "help":
                usageExit(0);
            case "e":
                examples(0);
            case "f":
                $USE_INTERNAL_FONT = true;
                break;
            case "d":
                $OUTPUT_TYPE = "DIR";
                break;
            case "t":
            case "toc":
                $CREATE_TOC = true;
                break;
            case "c":
            case "cover":
                $CREATE_COVER = true;
                break;
            case "F":
            case "weight":
                $USE_INTERNAL_FONT = true;
                $INTERNAL_FONT_WIDTH = $value;
                if (!in_array($INTERNAL_FONT_WIDTH, ["thin", "light", "regular", "medium"])) {
                    usageExit(0);
                }
                break;
            case "L":
            case "spacing":
                $LETTER_SPACING = floatval($value);
                break;
            case "b":
            case "break":
                $INSERT_PAGE_BREAKS = true;
                break;
            case "S":
            case "split":
                $TOC_SPLITTER = $value;
                break;
            case "s":
            case "size":
                $FONT_SIZE = floatval($value);
                break;
            case "o":
            case "output":
                $OUTPUT_NAME = $value;
                break;
        }
    } 

    // Parse positional arguments
    // Backwards-compatibility: You can specify the output name as the second argument.
    // This isn't documented, because we don't want to encourage people to do this, but
    // it should keep legacy scripts which call this from breaking.
    if (count($pos_args) == 2 && $OUTPUT_NAME == null) {
        $OUTPUT_NAME = $pos_args[1];
    } else if (count($pos_args) != 1) {
        usageExit(0);
    }

    $RFC_ID = $pos_args[0];
    $RFC_NAME = "rfc" . $RFC_ID;
    if ($OUTPUT_NAME == null) {
        $OUTPUT_NAME = "RFC ${RFC_ID}.epub";
    }

    unset($rest_index);
    unset($flags);
    unset($pos_args);
}



/* Output Functions */
{
    if ($OUTPUT_TYPE == "DIR") {
        $MK_DIR = function($name) {
            global $OUTPUT_NAME;
            mkdir($OUTPUT_NAME . "/" . $name, 0777, true);
        };
        $MK_FILE = function($name, $content){
            global $OUTPUT_NAME;
            file_put_contents($OUTPUT_NAME . "/" . $name, $content);
        };
    } else if ($OUTPUT_TYPE == "ZIP") {
        $EPUB_ARCHIVE = new ZipArchive();
        $EPUB_ARCHIVE->open($OUTPUT_NAME, ZipArchive::CREATE);
        $MK_DIR = function($name){
            global $EPUB_ARCHIVE;
            $EPUB_ARCHIVE->addEmptyDir($name);
        };
        $MK_FILE = function($name, $content){
            global $EPUB_ARCHIVE;
            $EPUB_ARCHIVE->addFromString($name, $content);
        };
    }

}

/* Data Fetching */
{
    $url = URL . $RFC_ID . URL_EXT;
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_USERAGENT, USER_AGENT);

    $RFC_RAW = curl_exec($ch);
    curl_close($ch);
    //$RFC_RAW = file_get_contents("/home/mario/Downloads/webs/RFC 6265 - HTTP State Management Mechanism.html");
    unset($url);
    unset($ch);
}


/* Disable Error Spitting */
{
    libxml_use_internal_errors(true);
}




/* Fix Rfc */
{

    //Load Dom
    $RFC_DOM = new DOMDocument('1.0', 'UTF-8');
    $RFC_DOM->loadHTML($RFC_RAW);

    //Set Elements
    $BODY = $RFC_DOM->getElementsByTagName("body")->item(0);
    $HEAD = $RFC_DOM->getElementsByTagName("head")->item(0);
    $BODY instanceof \DOMElement;
    $HEAD instanceof \DOMElement;
    $CONTENT = null;
    for ($i = 0; $i < $BODY->childNodes->length; $i++) {
        $child = $BODY->childNodes->item($i);
        if ($child instanceof DOMElement && $child->tagName == "div") {
            $CONTENT = $child;
        }
    }
    $CONTENT instanceof \DOMElement;

{
    //fix default styles

    //remove the first style tag
    $styles = $HEAD->getElementsByTagName("style");
    $stylesRemove = [];
    for ($i = 0; $i < $styles->length && $i < 1; $i++) { // remove only the first
        $s = $styles->item($i);
        if ($s instanceof DOMElement) {
            $stylesRemove[] = $s;
        }
    }
    foreach ($stylesRemove as $value) {
        $value->parentNode->removeChild($value);
    }
    unset($styles);
    unset($stylesRemove);

    $pbbf = $INSERT_PAGE_BREAKS ? "always" : "inherit";

    $style = $RFC_DOM->createElement("style");
    $style->setAttribute("type", "text/css");
    $style->nodeValue = <<<EOS

<![CDATA[

    body { font-size: 10pt; margin: 0 4em; }
    h1, h2, h3, h4, h5, h6, .h1, .h2, .h3, .h4, .h5, .h6 {
        font-weight: bold;
        display: inline;
        white-space: pre;
        font-family: monospace;
        font-size: ${FONT_SIZE}em;
        font-weight: bold;
    }
    pre {
        font-size: ${FONT_SIZE}em;
        /*margin-top: 0px;
        margin-bottom: 0px; maybe add an option for that*/
    }
    .pre {
        white-space: pre;
        font-family: monospace;
    }
    .header {
        font-weight: bold;
    }
    .newpage {
        page-break-before: ${pbbf};
    }
    .invisible {
        text-decoration: none;
        color: white;
    }
    .grey, .grey a:link, .grey a:visited {
        color: #777;
    }
    .meta-info {
        background-color: #EEE;
    }
    .top {
        border-top: 7px solid #EEE;
    }
    .pad {
        padding-top: 7px;
        line-height: 24px;
        padding-bottom: 4px;
    }

    .legend   { font-size: 90%; }
    .cplate   { font-size: 70%; border: solid grey 1px; }


    .bgwhite  { background-color: white; }
    .bgred    { background-color: #F44; }
    .bggrey   { background-color: #666; }
    .bgbrown  { background-color: #840; }
    .bgorange { background-color: #FA0; }
    .bgyellow { background-color: #EE0; }
    .bgmagenta{ background-color: #F4F; }
    .bgblue   { background-color: #66F; }
    .bgcyan   { background-color: #4DD; }
    .bggreen  { background-color: #4F4; }

    .draftcontent { margin-top:0px !important;}


    ]]>
EOS;

    $HEAD->appendChild($style);
    unset($style);
    unset($pbbf);
}

    //insert fonts
    if ($USE_INTERNAL_FONT) {
        $style = $RFC_DOM->createElement("style");
        $style->setAttribute("type", "text/css");
        $f = $INTERNAL_FONT . "-" . $INTERNAL_FONT_WIDTH;
        $style->nodeValue = <<<EOS
@font-face {
    font-family: 'mp-1m';
    font-weight: normal;
    font-style: normal;
    src: url('fonts/$f.eot');
    src: url('fonts/$f.eot?#iefix') format('embedded-opentype'),
    url('fonts/$f.woff') format('woff'),
    url('fonts/$f.ttf') format('truetype'),
    url('fonts/$f.svg#OpenSansBold') format('svg');
}

body, pre, h1, h2, h3, h4, h5, h6, .h1, .h2, .h3, .h4, .h5, .h6, span, .pre {
        font-family: 'mp-1m', monospace;
}
.noprint{
    display: none;
}
EOS;

        $HEAD->appendChild($style);
        unset($f);
        unset($style);
    }

    //set letter-spacing

    $BODY->setAttribute("style", $BODY->getAttribute("style") . "letter-spacing: {$LETTER_SPACING}px;");


    //remove javascript
    $BODY->setAttribute("onload", "");
    $scripts = $HEAD->getElementsByTagName("script");
    $scriptsRemove = [];
    for ($i = 0; $i < $scripts->length; $i++) {
        $s = $scripts->item($i);
        if ($s instanceof DOMElement) {
            $scriptsRemove[] = $s;
        }
    }
    foreach ($scriptsRemove as $value) {
        $value->parentNode->removeChild($value);
    }
    unset($scripts);
    unset($scriptsRemove);

    //remove page lines / remove HR
    for ($i = 0; $i < $CONTENT->childNodes->length; $i++) {
        $hr = $CONTENT->childNodes->item($i);
        if ($hr instanceof DOMElement && $hr->tagName == "hr") {
            $CONTENT->removeChild($hr);
        }
    }

    //remove page break markers
    $spansgray = $CONTENT->getElementsByTagName("span");
    $spansgrayRemove = [];
    for ($i = 0; $i < $spansgray->length; $i++) {
        $s = $spansgray->item($i);
        if ($s instanceof DOMElement && $s->hasAttribute("class") && $s->getAttribute("class") == "grey") {
            $spansgrayRemove[] = $s;
        }
    }
    foreach ($spansgrayRemove as $value) {
        $value->parentNode->removeChild($value);
    }
    unset($spansgray);
    unset($spansgrayRemove);
    unset($s);


    //fix remaining page spacing
    $page = 1;
    $pres = $CONTENT->getElementsByTagName("pre");
    for ($i = 0; $i < $pres->length; $i++) {
        $pre = $pres->item($i);
        if ($pre instanceof DOMElement && (($pre->hasAttribute("class") && $pre->getAttribute("class") == "newpage") || $i == 0)) {

            $page++;
            $span = $pre->childNodes->item(0);
            if ($span instanceof DOMElement && $span->tagName == "span" && $span->hasAttribute("id")) {
                if ($INSERT_PAGE_BREAKS) {
                  $span->textContent = "[Page " . $page . "]";
                } else {
                  $span->textContent = "[Page " . ($page - 1) . " End, " . $page . " Begin]";
                }
                $span->setAttribute("class", "gray");
                $span->setAttribute("style", "color: #999999;");
                $textNode = $pre->childNodes->item(2);
                $textNode->textContent = ltrim($textNode->textContent, "\n\r");
            }

            //fix spacing at the end of the page
            $textNode = $pre->childNodes->item($pre->childNodes->length - 1);
            $textNode->textContent = rtrim($textNode->textContent, "\n\r");
        }
    }


    //remove last page numbering
    $lastNode = $pre->childNodes->item($pre->childNodes->length - 1);
    if (preg_match("~\[Page [0-9]+\]$~", $lastNode->textContent) === 1) {
        $lastNode->textContent = substr($lastNode->textContent, 0, strrpos($lastNode->textContent, "\n"));
    }
    unset($lastNode);
    unset($page);
    unset($pres);
    unset($pre);
    unset($a);
    unset($textNode);
    unset($i);

    //fix ./rfcXXXXXX links
    $as = $CONTENT->getElementsByTagName("a");
    for ($i = 0; $i < $as->length; $i++) {
        $a = $as->item($i);
        if ($a instanceof DOMElement && $a->tagName == "a" && preg_match("~^\./rfc[0-9]+~", $a->getAttribute("href"))) {
            $a->setAttribute("href", "https://tools.ietf.org/html/" . $a->getAttribute("href"));
        }
    }
    unset($as);
    unset($a);
    unset($i);

}



/* Search Headings */
{
    $headingsElements = $CONTENT->getElementsByTagName("a");
    $HEADINGS = [];
    for ($i = 0; $i < $headingsElements->length; $i++) {
        $a = $headingsElements->item($i);
        if ($a instanceof DOMElement && !$a->hasAttribute("class") && $a->hasAttribute("href")
                //&& preg_match("~^[0-9]+(\.[0-9]+)*$~", $a->textContent)
                //&& preg_match("~^#section-[0-9]+(\.[0-9]+)*$$~", $a->getAttribute("href"))
                && preg_match("~^#.*$~", $a->getAttribute("href"))
                //&& $a->nextSibling->textContent{0} == "."
                && strlen($a->nextSibling->textContent) <= 80 && strpos($a->nextSibling->textContent, $TOC_SPLITTER) !== FALSE
        ) {
            $HEADINGS[] = [$a->getAttribute("href"), trim($a->nextSibling->textContent, ". "), $a->textContent];
        }
    }
}





/* Extract Data */
{
    //$TITLE = $CONTENT->getElementsByTagName("pre")->item(0)->getElementsByTagName("span")->item(0)->textContent;
    $TITLE = $HEAD->getElementsByTagName("title")->item(0)->textContent;

    $firstpage = $CONTENT->getElementsByTagName("pre")->item(0);
    $dataBlock = "";
    for ($i = 0; $i < $firstpage->childNodes->length; $i++) {
        $child = $firstpage->childNodes->item($i);
        if ($child instanceof DOMElement && $child->tagName == "span" && $child->hasAttribute("class") && $child->getAttribute("class") == "h1") {
            break;
        }
        $dataBlock .= $child->textContent;
    }


    $DATA_LEFT = $DATA_RIGHT = [];

    foreach (explode("\n", $dataBlock) as $line) {
        $pos = strrpos($line, "   ");
        $pos = $pos === FALSE ? strlen($line) : $pos;
        list($l, $r) = [trim(substr($line, 0, $pos)), trim(substr($line, $pos))];
        if (!empty($l)) {
            $DATA_LEFT[] = $l;
        }
        if (!empty($r)) {
            $DATA_RIGHT[] = $r;
        }
    }
    unset($child);
    unset($line);
    unset($i);
    unset($l);
    unset($r);
    unset($firstpage);
    unset($dataBlock);
    unset($pos);






    $AUTHOR = $DATA_RIGHT[0];
    $dateParsed = date_parse(end($DATA_RIGHT));
    $DATE = $dateParsed["year"] . "-" . $dateParsed["month"] . "-" . $dateParsed["day"];


    unset($dateParsed);
    unset($counter);

}


/* Create Folder */
{
    //create   META-INF/
    $MK_DIR("META-INF");


    //insert font;
    $MK_DIR("fonts");

}

/* Create Files */
{
    //create mimetype
    $MK_FILE("mimetype", "application/epub+zip");

    //create fonts
    if ($USE_INTERNAL_FONT) {
        $f = "fonts/" . basename($INTERNAL_FONT . "-" . $INTERNAL_FONT_WIDTH);
        foreach ($INTERNAL_FONT_FORMATS as $format) {
            $c = file_get_contents(__DIR__."/fonts/" . $INTERNAL_FONT . "-" . $INTERNAL_FONT_WIDTH . "." . $format);
            $MK_FILE($f . "." . $format, $c);
        }
        unset($f);
        unset($c);
    }

    //create META-INF/container.xml
    $MK_FILE("META-INF/container.xml", <<<EOF
<?xml version="1.0" encoding="UTF-8"?>
<container
  xmlns="urn:oasis:names:tc:opendocument:xmlns:container"
  version="1.0">
  <rootfiles>
    <rootfile
      full-path="$RFC_NAME.opf"
      media-type="application/oebps-package+xml"/>
  </rootfiles>
</container>
EOF
    );


    //create cover.xhtml

    if ($CREATE_COVER) {

        $MK_FILE("cover.xhtml", <<<EOF
<?xml version="1.0" encoding="UTF-8" ?>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ops="http://www.idpf.org/2007/ops"
      xml:lang="en">
  <head>
    <title>Cover</title>
    <style type="text/css">
        body, pre, h1, h2, h3, h4, h5, h6, .h1, .h2, .h3, .h4, .h5, .h6, span, .pre {
                font-family: sans-serif;
        }
    </style>
  </head>
  <body>
    <br />
    <br />
    <br />
    <br />
    <h1 style="text-align: center;">$TITLE</h1>
 </body>
</html>
EOF
        );
    }


    //create nav.xhtml

    if ($CREATE_TOC) {

        $toc = implode("", array_map(function($value)use($RFC_NAME){
                    return "<li><a href=\"$RFC_NAME.xhtml" . $value[0] . "\">" . $value[2] . " - " . $value[1] . "</a></li>\n";
        }, $HEADINGS));

        $MK_FILE("nav.xhtml", <<<EOF
<?xml version="1.0" encoding="UTF-8" ?>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ops="http://www.idpf.org/2007/ops"
      xml:lang="en">
  <head>
    <title>Table Of Contents</title>
    <style type="text/css">
        body, pre, h1, h2, h3, h4, h5, h6, .h1, .h2, .h3, .h4, .h5, .h6, span, .pre {
                font-family: sans-serif;
        }
    </style>
  </head>
  <body>
   <nav ops:type="toc">
    <h1>Table Of Contents</h1>
    <ul>
      <li><a href="nav.xhtml">Table Of Contents</a></li>
        $toc
    </ul>
  </nav>
 </body>
</html>
EOF
        );
        unset($toc);
    }


    //create $RFC_NAME.ncx
    $counter = new stdClass();
    $counter->i = 0;
    $nav = implode("", array_map(function($value)use($counter, $RFC_NAME){
                $x = "<navPoint playOrder=\"$counter->i\" id=\"id_{$counter->i}\"><navLabel><text>{$value[2]} - {$value[1]}</text></navLabel><content src=\"$RFC_NAME.xhtml{$value[0]}\"/></navPoint>\n";
                $counter->i++;
                return $x;
    }, $HEADINGS));

    $MK_FILE("$RFC_NAME.ncx", <<<EOF
<?xml version="1.0" encoding="UTF-8"?>
  <ncx xmlns="http://www.daisy.org/z3986/2005/ncx/"
    version="2005-1"
    xml:lang="en">
    <head>
      <meta name="dtb:uid" content="$RFC_ID"/>
    </head>
    <docTitle>
      <text>$TITLE</text>
    </docTitle>
    <docAuthor>
      <text>$AUTHOR</text>
    </docAuthor>
    <navMap>
      <navPoint playOrder="1" id="id_01">
        <navLabel>
          <text>$TITLE</text>
        </navLabel>
        <content src="$RFC_NAME.xhtml"/>
      </navPoint>
        $nav
    </navMap>
  </ncx>
EOF
    );
    unset($nav);


    //create $RFC_NAME.opf
    $counter = new stdClass();
    $counter->i = 0;
    if ($USE_INTERNAL_FONT) {
        $f = "fonts/" . $INTERNAL_FONT . "-" . $INTERNAL_FONT_WIDTH;
        $fonts = implode("", array_map(function($ext)use($f, $counter){
                    $mime = INTERNAL_FONT_MIME[$ext];
                    $x = "<item id=\"font$counter->i\"  href=\"$f.$ext\"  media-type=\"$mime\"/>\n";
                    $counter->i++;
                    return $x;
        }, $INTERNAL_FONT_FORMATS));
    } else {
        $fonts = "";
    }

    if ($CREATE_TOC) {
        $tocItem = '<item id="nav" href="nav.xhtml" media-type="application/xhtml+xml" properties="nav"/>';
        $tocRef = '<itemref idref="nav"/>';
    } else {
        $tocItem = "";
        $tocRef = "";
    }
    if ($CREATE_COVER) {
        $coverItem = '<item id="cover" href="cover.xhtml" media-type="application/xhtml+xml" properties="cover"/>';
        $coverRef = '<itemref idref="cover"/>';
    } else {
        $coverItem = "";
        $coverRef = "";
    }

    $MK_FILE("$RFC_NAME.opf", <<<EOF
<?xml version="1.0" encoding="UTF-8"?>
  <package version="2.0"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:opf="http://www.idpf.org/2007/opf"
    xmlns="http://www.idpf.org/2007/opf"
    unique-identifier="rfcId">
    <metadata>
      <dc:identifier id="rfcId" opf:scheme="UUID">$RFC_ID</dc:identifier>
      <dc:language>en</dc:language>
      <dc:title xml:lang="de">$TITLE</dc:title>
      <dc:description xml:lang="en">$TITLE</dc:description>
      <dc:creator
        opf:file-as="$AUTHOR"
        opf:role="aut"
        xml:lang="en">$AUTHOR</dc:creator>
      <dc:date opf:event="creation">$DATE</dc:date>
      <dc:date opf:event="publication">$DATE</dc:date>
    </metadata>
    <manifest>
      <item id="ncx" href="$RFC_NAME.ncx" media-type="application/x-dtbncx+xml"/>
      $coverItem
      $tocItem
      <item id="$RFC_NAME" href="$RFC_NAME.xhtml" media-type="application/xhtml+xml"/>
      $fonts
    </manifest>
    <spine toc="ncx">
      $coverRef
      $tocRef
      <itemref idref="$RFC_NAME"/>
    </spine>
  </package>
EOF
    );
    unset($f);
    unset($counter);
    unset($fonts);
    unset($tocItem);
    unset($tocRef);


//create $RFC_NAME.xhtml
    $output = "";
    if (in_array("tidy", get_loaded_extensions())) {
        $config = array(
            'indent' => true,
            'output-xhtml' => true,
            'wrap' => 200);

        // Tidy
        $tidy = new tidy();
        $tidy->parseString($RFC_DOM->saveXML(), $config, 'utf8');
        $tidy->cleanRepair();
        $output .= $tidy;
    } else {
        $output = $RFC_DOM->saveXML();
        echo "Tidy not found, output maybe not valid xhtml. Please install php-tidy and tidy." . PHP_EOL;
    }

    $MK_FILE($RFC_NAME . ".xhtml", $output);
    unset($output);
    unset($tidy);
    unset($config);
}



/* Finalizing */
{
    if ($OUTPUT_TYPE == "ZIP") {
        $EPUB_ARCHIVE->close();
    }
}
